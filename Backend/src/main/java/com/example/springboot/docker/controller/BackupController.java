package com.example.springboot.docker.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.springboot.docker.model.Backup;
import com.example.springboot.docker.repository.BackupRepository;


@Controller
@RequestMapping("/ui/")
public class BackupController {
	
	@Autowired // This means to get the bean called backupRepository Which is auto-generated by Spring, we will use it to handle the data
    private BackupRepository backupRepository;
	
	@GetMapping("/list")
	public String backups(Model model) {
		model.addAttribute("backups", this.backupRepository.findAll());
		return "index";
	}
	
	@GetMapping("showForm")
	public String showBackupForm(Backup backup) {
		return "add-backup";
	}
	
	@PostMapping("/add") // Map ONLY POST Requests
	public String addBackup(@Valid Backup backup, BindingResult result, Model model) {
		if(result.hasErrors()) {
			return "add-backup";
		}
		else {
			this.backupRepository.save(backup);
		}
		return "redirect:list";
	}
	
	@GetMapping("/delete/{id}")
		public String deleteBackup(@PathVariable ("id") long id, Model model) {
		
		Backup backup = this.backupRepository.findById(id)
				.orElseThrow(() -> new IllegalArgumentException("Invalid backup id : " + id));
		
		this.backupRepository.delete(backup);
		model.addAttribute("backups", this.backupRepository.findAll());
		return "index";
	}
}