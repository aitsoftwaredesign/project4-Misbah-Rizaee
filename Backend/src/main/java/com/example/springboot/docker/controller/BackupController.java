package com.example.springboot.docker.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.example.springboot.docker.model.Backup;
import com.example.springboot.docker.repository.BackupRepository;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Timer;
import java.util.TimerTask;

@Controller
public class BackupController {

	@Autowired // This means to get the bean called backupRepository Which is auto-generated by
				// Spring, we will use it to handle the data
	private BackupRepository backupRepository;

	private static int backupsInProgress = 0;
	private static int backupsDone = 0;

	@GetMapping("/list")
	public String backups(Model model) {
		List<Backup> backups = backupRepository.findAll();
		model.addAttribute("backups", backups);
		model.addAttribute("InProgress", backupsInProgress);
		model.addAttribute("Done", backupsDone);
		return "index";
	}

	@GetMapping("showForm")
	public String showBackupForm(Backup backup) {
		return "add-backup";
	}

	@PostMapping("/add")
	public String addBackup(@RequestParam("file") MultipartFile file, @RequestParam("time") String time)
			throws ParseException {

		Backup backup = new Backup();

		String fileName = file.getOriginalFilename();
		backup.setFolderName(fileName);
		backup.setTime(time);
		backup.setStatus("IN PROGRESS");
		backupsInProgress += 1;

		backupRepository.save(backup);

		runScheduledBackup(backup.getTime(), backup.getFolderName(), backup.getId(), file);

		return "redirect:list";
	}

	public void runScheduledBackup(String time, String folderName, long id, MultipartFile file) throws ParseException {

		// the Date and time at which I want to execute
		DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		Date date = dateFormatter.parse(time.toString().replace("T", " "));

		// To create the time and schedule it
		Timer timer = new Timer();

		TimerTask myTask = new TimerTask() {
			@Override
			public void run() {

				try {
					// Update the backup status
					Backup updateBackup = backupRepository.findById(id).get();
					updateBackup.setStatus("DONE");
					backupRepository.save(updateBackup);

					String folderName = time.toString().replace(":", "-") + "-" + "ID" + id;
					String path = System.getProperty("user.home") + File.separator + "AutoBackup" + File.separator
							+ "Backups" + File.separator + folderName;
					File folder = new File(path);

					if (!folder.exists()) {
						try {
							System.out.println("Creating the directory (" + path + ")");
							Files.createDirectories(Paths.get(path));
						} catch (IOException e1) {
							System.out.println("Failed to create directory.");
						}
					} else {
						System.out.println("Directory already exists at (" + path + ")");
					}

					String fileName = file.getOriginalFilename();
					try {
						file.transferTo(new File(path + File.separator + fileName));
					} catch (IllegalStateException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}

					backupsInProgress -= 1;
					backupsDone += 1;

					System.out.println("The file \"" + fileName + "\" has been backed up at \"" + time);

				} catch (NoSuchElementException e) {
					System.out.println("Scheduled backup with ID " + id + " was deleted. File (" + folderName
							+ ") has not been backed up.");
				}
			}
		};

		// To schedule the task and Start it when the date is reached!
		timer.schedule(myTask, date);
	}

	@GetMapping("/delete/{id}")
	public String deleteBackup(@PathVariable("id") long id, Model model) {

		Backup backup = this.backupRepository.findById(id)
				.orElseThrow(() -> new IllegalArgumentException("Invalid backup id : " + id));

		if (backup.getStatus().equals("IN PROGRESS")) {
			backupsInProgress -= 1;
		} else if (backup.getStatus().equals("DONE")) {
			backupsDone -= 1;
		}

		this.backupRepository.delete(backup);

		model.addAttribute("backups", this.backupRepository.findAll());
		model.addAttribute("InProgress", backupsInProgress);
		model.addAttribute("Done", backupsDone);
		return "redirect:/list";
	}
}